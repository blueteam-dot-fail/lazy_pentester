#!/usr/bin/env python

##########################################################################################
# www.blueteam.fail                                                                      #
# License: MIT License - do whatever, but don't be a dick                                #
#                                                                                        #
# Script does DNS/reverse lookup (-r) of each single IP/URL address from the file.       #
# Output is saved to: <input filename>-digested.txt                                      #
# Usage: python mass_dns_lookup.py -i ips.txt -r                                         #
##########################################################################################

import socket
import os
import progressbar as pbar
import argparse


def get_ip_address(path_to_file):
    # Progress bar
    i = 0
    number_of_lines = sum(1 for line in open(path_to_file))
    widgets = ['Analysing: ', pbar.Percentage(), ' ', pbar.Bar(marker=pbar.RotatingMarker()), ' ', pbar.ETA()]
    timer = pbar.ProgressBar(widgets=widgets, maxval=number_of_lines).start()
    file_data = open(path_to_file, "r")
    output_file = open(create_output_file(path_to_file), 'w+')

    for fqdn in file_data:
        ip_addr_list = []
        data = socket.getaddrinfo(fqdn.rstrip(), 0, 0, 0, 0)  # DNS lookup
        for result in data:
            ip_addr_list.append(result[-1][0])
        ip_addr_string = ', '.join(ip_addr_list)
        output_file.write(str(fqdn).rstrip() + ' : ' + str(ip_addr_string) + '\n')
        i += 1
        timer.update(i)  # Progress bar update


def get_fqdn(path_to_file):
    print 'Reverse DNS lookup'
    # Progress bar
    i = 0
    number_of_lines = sum(1 for line in open(path_to_file))
    widgets = ['Analysing: ', pbar.Percentage(), ' ', pbar.Bar(marker=pbar.RotatingMarker()), ' ', pbar.ETA()]
    timer = pbar.ProgressBar(widgets=widgets, maxval=number_of_lines).start()
    file_data = open(path_to_file, "r")
    output_file = open(create_output_file(path_to_file), 'w+')

    for ip_addr in file_data:
        fqdn = socket.getfqdn(ip_addr)  # reverse DNS lookup
        output_file.write(str(fqdn) + ' : ' + str(ip_addr).rstrip() + '\n')
        i += 1
        timer.update(i)  # Progress bar update

    file_data.close()


def create_output_file(path_to_file):
    output_file_name = str(
        os.path.splitext(path_to_file)[0]) + '-digested.txt'  # Create new file 'source filename' + '-digested.txt'
    print 'Output file: ' + str(output_file_name)
    return output_file_name


def main():
    parser = argparse.ArgumentParser(description='#Mass DNS lookup tool#')
    parser.add_argument('-i', help='file with IPs/URLS to scan (multiple files are supported)', metavar='file', type=str, nargs='?')
    parser.add_argument('-r', help='Reverse DNS lookup (IP -> URL)', action='store_true')
    args = parser.parse_args()

    if args.i:
        path_to_file = ''.join(args.i)
        if args.r == True:
            get_fqdn(path_to_file)
        else:
            get_ip_address(path_to_file)
    else:
        print 'No file [-i] specified. Please refer to -h.'


main()
